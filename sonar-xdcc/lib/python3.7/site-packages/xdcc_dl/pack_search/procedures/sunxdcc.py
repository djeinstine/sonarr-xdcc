import requests
from typing import List
from xdcc_dl.entities.XDCCPack import XDCCPack
from xdcc_dl.entities.IrcServer import IrcServer
from puffotter.units import byte_string_to_byte_count


def find_sunxdcc_packs(search_phrase: str) -> List[XDCCPack]:
    """
    Searches for XDCC Packs matching the specified search string on https://sunxdcc.com/

    :param search_phrase: The search phrase to search for
    :return:              The list of found XDCC Packs
    """

    if not search_phrase:
        return []

    packs: List[XDCCPack] = []
    page_id = 0
    # the number of pages of results will be set properly in the request below

    
    api_url = f'http://sunxdcc.com/deliver.php?sterm={search_phrase}' #search phrase with

    raw_html = requests.get(api_url)
    
    if raw_html.status_code != 200:
        return packs
    
    """
    json parse:
    network	for the - you guessed it - irc network.
    channel	for the channel.
    bot	    for the bot.
    fsize	for the filesize.
    fname	for the filename.
    gets	for the number of times the file was downlaoded.
    botrec	for the bot's max upload speed. Will be "Na" if not available.
    packnum for the bot's pack number
    """

    #get json and turn into a pandas data frame
    result = raw_html.json()
    
    #store info
    packs = []
    for idx in range(0,len(result['fname'])):
        server = IrcServer(result['network'][idx])
        pack = XDCCPack(server, result["bot"][idx], int(result["packnum"][idx].replace('#','')))
        pack.set_filename(result["fname"][idx])
        pack.set_size(byte_string_to_byte_count(result["fsize"][idx].replace('[','').replace(']','')))
        packs.append(pack)

    return packs
